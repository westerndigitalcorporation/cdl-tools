#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2022 Western Digital Corporation or its affiliates.
#

#
# Test groups
# Entry format: group name, first test case num, last test case num
#

function nr_groups()
{
	echo "$(ls -d ${scriptdir}/0?_* | wc -l)"
}

function group_num_from_dir()
{
	local g="$(basename "$1")"

	echo "$g" | cut -d'_' -f1
}

function group_dir_from_num()
{
	echo "$(find ${scriptdir} -name "$1_*" -print)"
}

function group_name()
{
	local gdir="$(ls -d ${scriptdir}/$1_*)"
	local g="$(basename "${gdir}")"

	echo "$g" | cut -d'_' -f2- | sed 's/_/ /g'
}

function test_num()
{
	basename "$1" .sh
}

function test_group_num()
{
	local tnum="$1"

	echo "${tnum:0:2}"
}

function test_file_from_num()
{
	local tgnum="$(test_group_num "$1")"
	local tgdir="$(group_dir_from_num "${tgnum}")"

	echo "${tgdir}/$1.sh"
}

function exit_skip()
{
	if [ $# == 1 ]; then
		echo " --> skip: $1"
	else
		echo " --> skip"
	fi
	exit 2
}

function exit_warning()
{
	if [ $# == 1 ]; then
		echo " --> warning: $1"
	else
		echo " --> warning"
	fi
	exit 3
}

function exit_failed()
{
	if [ $# == 1 ]; then
		echo " --> failed: $1"
	else
		echo " --> failed"
	fi
	exit 1
}

function require_lib()
{
	if [ "$(ldconfig -p | grep -c "$1")" == 0 ]; then
		echo "$1 not found."
		echo "Installing $1 is required to run tests."
		exit 1
	fi
}

function require_program()
{
	[[ $(type -P "$1") ]] || \
		{
			echo "$1 not found."
			echo "Installing $1 is required to run tests."
			exit 1
		}
}

function require_fio_cmdprio_hint()
{
	require_program "fio"

	# Check that the version of fio installed has the ioprio_hint option
	fio --name="test" --filename=/dev/null \
		--ioengine=io_uring --cmdprio_hint=2 --size=1M > /dev/null 2>&1
	if [ $? -eq 1 ]; then
		echo "The installed version of fio does not seem to have CDL support"
		echo "(--cmdprio_hint option not supported)"
		exit 1
	fi
}

function have_module()
{
	modinfo "$1" > /dev/null 2>&1
	[ $? == 0 ]
}

function have_dev()
{
	[ -e "/dev/$1" ]
}

function min()
{
	local a=$1
	local b=$2

	echo $((a < b ? a : b))
}

function max()
{
	local a=$1
	local b=$2

	echo $((a > b ? a : b))
}

function devname()
{
	basename "$(realpath $1)"
}

function devtype()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	zoned="$(cat /sys/block/${bdev}/queue/zoned)"
	if [ "${zoned}" == "none" ]; then
		echo "cmr"
	else
		echo "smr"
	fi
}

function dev_capacity()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local bdev_capacity="/sys/block/${bdev}/size"

        if [ -f "${bdev_capacity}" ]; then
		echo "$(cat ${bdev_capacity})"
	else
		echo "0"
	fi
}

function dev_number_of_zones()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local bdev_nr_zones="/sys/block/${bdev}/queue/nr_zones"

	if [ -f "${bdev_nr_zones}" ]; then
		echo "$(cat ${bdev_nr_zones})"
	else
		echo "0"
	fi
}

function dev_fw()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	cat /sys/block/${bdev}/device/rev
}

function dev_adapter_driver()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	host="host$(ls /sys/block/${bdev}/device/scsi_disk | cut -d':' -f1)"

	cat /sys/bus/scsi/devices/${host}/scsi_host/${host}/proc_name
}

function dev_is_ata()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local val=$(lsscsi | grep "${bdev}" | grep -c "ATA")

	[ "${val}" == "1" ]
}

function dev_uses_hba_sat()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local val

	val=$(cdladm info "${dev}" | grep "SAT Product" | \
		cut -f2 -d':' | tr -d '[:blank:]')

	[ "${val}" != "libata" ]
}

function dev_wait_for_revalidate()
{
	local dev="$(realpath $1)"

	for tt in {0..60}; do
		cap=$(dev_capacity ${dev})
		if [ "${cap}" != "0" ]; then
			return 0
		fi
		sleep .5
	done

	echo "Failed to get capacity"

	return 1
}

function dev_revalidate()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local hostid

	if dev_uses_hba_sat "${dev}"; then
		return 0
	fi

	# Remove and rescan the device
	devid=$(ls /sys/block/${bdev}/device/scsi_device/)
	hostid=$(echo "${devid}" | cut -f1 -d':')

	echo 1 > /sys/class/scsi_device/${devid}/device/delete ||
		exit_failed "Remove device ${dev} for rescan failed"

	echo "- - -" > /sys/class/scsi_host/host${hostid}/scan ||
		exit_failed "Rescan ${dev} failed"

	# Wait for the block device to come back
	dev_wait_for_revalidate "${dev}" || return 1

	# Re-enable NCQ
	echo 1 > /sys/block/${bdev}/device/queue_depth
	echo 32 > /sys/block/${bdev}/device/queue_depth

	return 0
}

function create_nullb()
{
	local n=0

	modprobe null_blk nr_devices=0

	while [ 1 ]; do
		if [ ! -b "/dev/nullb$n" ]; then
			break
		fi
		n=$(( n + 1 ))
	done

	mkdir /sys/kernel/config/nullb/nullb$n
	echo 0 > /sys/kernel/config/nullb/nullb$n/zoned
	echo 1 > /sys/kernel/config/nullb/nullb$n/power

	echo "$n"
}

function destroy_nullb()
{
	local n=$1

	echo 0 > /sys/kernel/config/nullb/nullb$n/power
	rmdir /sys/kernel/config/nullb/nullb$n

	rmmod null_blk >> /dev/null 2>&1
}

function get_desired_scheduler()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	if [ "$(devtype ${dev})" == "cmr" ]; then
		echo "none"
	else
		echo "mq-deadline"
	fi
}

function dev_scheduler()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local sched_str="$(cat /sys/block/${bdev}/queue/scheduler)"

	# No brackets if only a single scheduler is available
	if [ "$sched_str" == "none" ]; then
		echo "$sched_str"
	else
		echo "$sched_str" | sed -r 's/.*\[(.+)\].*/\1/'
	fi
}

function set_scheduler()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local sched="$2"

	echo "$sched" > /sys/block/${bdev}/queue/scheduler
}

function dev_cdl_supported()
{
	local dev="$(realpath $1)"

	info="$(cdladm info ${dev} | grep "Command duration limits:" | head -1)"
	echo "${info}" | grep -c supported
}

function kernel_cdl_supported()
{
	local dev="$(realpath $1)"

	info="$(cdladm info ${dev} | grep "Command duration limits:" | tail -1)"
	echo "${info}" | grep -c supported
}

function cdl_enabled()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	cat /sys/block/${bdev}/device/cdl_enable
}

function enable_cdl()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	echo "1" > /sys/block/${bdev}/device/cdl_enable
}

function disable_cdl()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"

	echo "0" > /sys/block/${bdev}/device/cdl_enable
}

function validate_page()
{
	local dev=$1
	local page_type=$2
	local original_page=$3
	local saved_page="${logdir}/saved_page.cdl"

	cdladm save --page $page_type --file $saved_page $dev || \
		return 1

	diff -q $original_page $saved_page || \
		return 1

	return 0
}

function require_duration_guideline()
{
	have_dg="$(cdladm info "$1" | grep -c "Command duration guidelines: supported")"
	if [ "${have_dg}" == "0" ]; then
		exit_skip
	fi
}

function require_ata_dev()
{
	if ! dev_is_ata "$dev"; then
		exit_skip
	fi
}

function require_cdl_statistics()
{
	have_stats="$(cdladm info "$1" | grep -c "Statistics: supported")"
	if [ "${have_stats}" == "0" ]; then
		exit_skip
	fi
}

function fio_get_clat_avg()
{
	local line=$(grep "clat prio $2" "$1" | head -1)
	local avg
	local unit

	if [ -z "${line}" ]; then
		echo 0
		return
	fi

	avg=$(echo "${line}" | cut -d'=' -f4 | cut -d',' -f1)
	unit=$(echo "${line}" | cut -d'(' -f2 | cut -d')' -f1)

	if [ "${unit}" == "msec" ]; then
		scale=1000
	elif [ "${unit}" == "usec" ]; then
		scale=1
	else
		scale=0
	fi

	echo "scale=0; ${avg} * ${scale} / 1" | bc
}

function fio_has_io_error()
{
	[ "$(grep -c "func=io_u error" $1)" != 0 ]
}

function fio_get_io_error()
{
	local err="$(grep ", err=" $1)"

	if [ ! -z "${err}" ]; then
		echo "${err}" | cut -d'=' -f3 | cut -d'/' -f1
		exit 0
	fi

	# When continuing on error (ignoring ETIME), errors are
	# still logged but not reported as fatal with "err=".
	# Check this here.
	err="$(grep ": Timer expired:" $1)"
	if [ ! -z "${err}" ]; then
		echo "62"
		exit 0
	fi

	# No errors seen
	echo "0"
}

function fio_get_io_error_count()
{
	grep -c "fio: io_u error on file " "$1"
}

function dev_qd()
{
	local rdev="$(realpath $1)"
	local bdev="$(basename ${rdev})"

	cat /sys/block/${bdev}/device/queue_depth
}

function set_qd()
{
	local rdev="$(realpath $1)"
	local bdev="$(basename ${rdev})"
	local qd="$2"

	if [ "$(dev_qd ${rdev})" == "${qd}" ]; then
		return 0
	fi

	if [ "$qd" != "1" ]; then
		echo 1 > /sys/block/${bdev}/device/queue_depth
		echo "${qd}" > /sys/block/${bdev}/device/queue_depth
	else
		echo 1 > /sys/block/${bdev}/device/queue_depth
	fi
}

function enable_ncq()
{
	set_qd "$1" 32
}

function disable_ncq()
{
	set_qd "$1" 1
}

function set_nomerges()
{
	local dev="$(realpath $1)"
	local bdev="$(basename ${dev})"
	local val="$2"

	echo "${val}" > /sys/block/${bdev}/queue/nomerges
}

function disable_merges()
{
	set_nomerges "$1" 1
}

function enable_merges()
{
	set_nomerges "$1" 0
}

function get_limits_page_type()
{
	local dev="$1"
	local type="$2" # read or write

	page="$(cdladm show ${dev} | grep ${type} | cut -f2 -d' ' | cut -f1 -d':')"
	if [ "${page}" != "T2A" ] && [ "${page}" != "T2B" ]; then
		exit_failed "Could not determine the CDL page for ${type} commands"
	fi

	echo "${page}"
}

function get_limits_page_file()
{
	local dev="$1"
	local page="$2" # T2A or T2B
	local limits_file="$3"

	if [ "${limits_file}" == "" ]; then
		echo "${scriptdir}/cdl/${page}-empty.cdl"
	else
		echo "${scriptdir}/cdl/${page}-${limits_file}.cdl"
	fi
}

function test_setup()
{
	local dev="$1"
	local read_limits="$2"
	local write_limits="$3"
	local expect_error="$4"
	local compare_latencies="$5"
	local ncq="$6"
	local rw="$7"

	# It does not make sense to compare latencies when expecting an error, as such
	# test cases are expected to exit before reaching the supplied fio runtime.
	if [ "$expect_error" == "1" ] && [ "$compare_latencies" == "1" ]; then
		exit_failed "invalid test case configuration"
	fi

	# We only support rw=randread and rw=randwrite for now
	if [ "$rw" != "randread" ] && \
	   [ "$rw" != "randwrite" ] && \
	   [ "$rw" != "randrw" ]; then
		exit_failed "invalid test case configuration"
	fi

	# Skip non-NCQ tests on SCSI
	if [ "$ncq" == "0" ] && ! dev_is_ata "$dev"; then
		exit_skip
	fi

	# Only perform queue depth changes if ATA
	if dev_is_ata "$dev"; then
		if [ "$ncq" == "1" ]; then
			enable_ncq "$dev"
			echo "NCQ Enabled (Max QD=$(dev_qd "${dev}"))"
		else
			disable_ncq "$dev"
			echo "NCQ Disabled (Max QD=$(dev_qd "${dev}"))"
		fi
	fi

	#
	# Only upload the cdl page for reads and writes if they
	# differ from the existing one
	#
	page_type="$(get_limits_page_type ${dev} read)"
	page_file="$(get_limits_page_file ${dev} ${page_type} ${read_limits})"
	echo "Using CDL file ${page_file} for read commands"

	validate_page "${dev}" "${page_type}" "${page_file}" || {
		echo "Uploading ${page_type} page"
		cdladm upload --file "${page_file}" "${dev}" || \
			exit_failed "failed to upload read ${page_type} page"

		validate_page "${dev}" "${page_type}" "${page_file}" || \
			exit_failed "failed to validate read ${page_type} page"
	}

	page_type="$(get_limits_page_type ${dev} write)"
	page_file="$(get_limits_page_file ${dev} ${page_type} ${write_limits})"
	echo "Using CDL file ${page_file} for write commands"

	validate_page "${dev}" "${page_type}" "${page_file}" || {
		echo "Uploading ${page_type} page"
		cdladm upload --file "${page_file}" "${dev}" || \
			exit_failed "failed to upload write ${page_type} page"

		validate_page "${dev}" "${page_type}" "${page_file}" || \
			exit_failed "failed to validate write ${page_type} page"
	}

	enable_cdl "${dev}" || exit_failed "failed to enable CDL"
}

function test_setup_stats()
{
	local dev="$1"
	local stats="$2"
	local saved_stats="${logdir}/saved_stats.cfg"
	local statscfg="${scriptdir}/cdl/${stats}"

	cdladm stats-save --file "${saved_stats}" "${dev}" || \
		exit_failed "Save statistics configuration failed"

	diff -q "${statscfg}" "${saved_stats}" && \
		return 0

	cdladm stats-upload --file "${statscfg}" "${dev}" || \
		exit_failed "Upload statistics configuration failed"

	return 0
}

function time_cmdline()
{
	# format is not supported in the built-in time command
	local time_bin=$(type -P time)

	echo "$time_bin -f 'CDL_REAL_RUNTIME: %e' -- "
}

function get_nr_dlds()
{
	local nr_sep=$(echo "$1" | grep -c "+")

	echo $(( nr_sep + 1 ))
}

function get_dld()
{
	echo "$1" | cut -f$2 -d'+'
}

function fio_common_cmdline()
{
	local dev="$1"
	local filename="$2"
	local testname="$3"
	local cdl_dld="$4"
	local expect_error="$5"
	local compare_latencies="$6"
	local rw="$7"
	local fiocmd="$(time_cmdline)"
	local cdl_perc

	fiocmd+="fio --name=\"$testname\""
	fiocmd+=" --filename=$dev"
	fiocmd+=" --random_generator=tausworthe64"
	fiocmd+=" --write_lat_log=${logdir}/$(test_num $filename)_lat.log"
	fiocmd+=" --log_prio=1 --per_job_logs=0"
	fiocmd+=" --ioengine=io_uring --iodepth=32"
	fiocmd+=" --bs=1280k --direct=1"
	fiocmd+=" --runtime=${fio_run_time}"
	fiocmd+=" --offset=0 --size=$(( fio_size * 512 ))"

	fiocmd+=" --rw=${rw}"
	if [ "$rw" == "randrw" ]; then
		fiocmd+=" --rwmixread=70"
		fiocmd+=" --rwmixwrite=30"
	fi

	#
	# If we expect errors, increase the percentage of CDL commands to
	# a high value to force the errors to happen. Otherwise, keep the
	# percentage of CDL commands low so that we can observe latency
	# differences. In all cases, always make sure we have a mix of
	# CDL and non-CDL commands to fully exercise the kernel IO and
	# error paths.
	#
	if [ "$expect_error" == "0" ]; then
		fiocmd+=" --ramp_time=10"
		cdl_perc="10"
	else
		cdl_perc="90"
	fi

	#
	# Always request fio to stop on any error, unless we are actually
	# expecting I/O errors to happen, in which case we keep going,
	# unless the user explicitly told us to stop.
	#
	if [ "$expect_error" == "0" ]; then
		fiocmd+=" --continue_on_error=none"
	else
		if [ "${fio_stop_on_error}" == "0" ]; then
			# Ignore ETIME errors
			fiocmd+=" --continue_on_error=io"
			fiocmd+=" --ignore_error=62,62"
			fiocmd+=" --error_dump=1"
		else
			fiocmd+=" --continue_on_error=none"
		fi
	fi

	nr_dlds=$(get_nr_dlds "${cdl_dld}")
	if [ "${nr_dlds}" == "1" ]; then

		# Single DLD used
		fiocmd+=" --cmdprio_class=2 --cmdprio_hint=${cdl_dld}"
		if [ "$rw" == "randrw" ]; then
			# Use CDL only for reads
			fiocmd+=" --cmdprio_percentage=${cdl_perc},0"
		else
			fiocmd+=" --cmdprio_percentage=${cdl_perc}"
		fi

	elif [ "${nr_dlds}" == "2" ]; then

		# 2 DLDs used
		dld1=$(get_dld "${cdl_dld}" 1)
		dld2=$(get_dld "${cdl_dld}" 2)
		dld_perc=$(( cdl_perc / 2 ))

		fiocmd+=" --cmdprio_bssplit="
		fiocmd+="1280k/${dld_perc}/2/0/${dld1}:"
		fiocmd+="1280k/${dld_perc}/2/0/${dld2}"

		if [ "$rw" == "randrw" ]; then
			# Use CDL only for reads
			fiocmd+=",1280k/100/0/0/0"
		fi

	else

		exit_failed "invalid cdl_dld argument ${cdl_dld}"

	fi

	if [ "$(devtype ${dev})" == "smr" ]; then
		fiocmd+=" --zonemode=zbd"
	fi

	fiocmd+=" 2>&1"

	echo $fiocmd
}

function analyze_log()
{
	local fiolog="$1"
	local expect_error="$2"
	local compare_latencies="$3"
	local cdl_dld="$4"
	local rw="$5"
	local dev="$6"
	local real_runtime
	local max_runtime

	real_runtime="$(grep "CDL_REAL_RUNTIME: " $fiolog)"
	if [ -z "$real_runtime" ]; then
		exit_failed "real runtime not seen in fio log"
	fi

	real_runtime=${real_runtime#CDL_REAL_RUNTIME: }

	max_runtime=${fio_run_time}

	# Add 10s ramptime
	max_runtime=$((max_runtime + 10))

	# Add a 2 second buffer on top of the max time fio is supposed to run,
	# to account for the time it takes to start and exit the binary.
	# We need a small buffer so that we do not accidentally fail test cases
	# that are expected to run the whole run time.
	max_runtime=$((max_runtime + 2))

	# Add additional buffer time on top of the max time if SMR drives are
	# used, as fio takes extra time to get zone info on zoned block devices.
	# Overhead is estimated to be around 1 second per 25000 zones.
	if [ "$(devtype ${dev})" == "smr" ]; then
		local zone_overhead=$(( $(dev_number_of_zones ${dev}) / 25000 + 1 ))
		max_runtime=$((max_runtime + zone_overhead))
	fi

	# If fio ran longer than max_runtime, then most likely an I/O timed out
	# and the HBA had to be hard reset. This would suggest a FW issue.
	# This check tries to catch such cases, so that we don't accidentally
	# PASS a test case which had I/O timeouts.
	if [ $(echo "$real_runtime > $max_runtime" | bc) -gt 0 ]; then
		exit_failed "fio ran longer than specified"
	fi

	if [ "$expect_error" == "1" ]; then
		# We should have IO errors. However, for write workloads, the
		# drive internal caching may significantly speed up commands,
		# leading to no IO errors. For such case, only warn.
		if ! fio_has_io_error "${fiolog}"; then
			if [ "$rw" == "randwrite" ]; then
				exit_warning "fio did not see any IO error"
			else
				exit_failed "fio did not see any IO error"
			fi
		fi

		# IO errors should be 62 (ETIME)
		errno="$(fio_get_io_error ${fiolog})"
		if [ "${errno}" != "62" ]; then
			exit_failed "fio saw error ${errno} instead of ETIME=62"
		fi
	else
		# We should not have any IO error
		if fio_has_io_error "${fiolog}"; then
			exit_failed "I/O errors detected, we should not have any"
		fi
	fi

	# Get IO completion average latency
	nocdl=$(fio_get_clat_avg "${fiolog}" "0/0/0")
	cdl=$(fio_get_clat_avg "${fiolog}" "2/0/${cdl_dld}")

	echo "Average latency: no-cdl=${nocdl}, cdl=${cdl}"

	if [ "$compare_latencies" == "1" ]; then
		# Issue a warning if we do not detect sufficient
		# difference between cdl vs no-cdl latencies
		thresh=$(( nocdl / 2 ))
		if [ ${cdl} -eq 0 ] || [ ${cdl} -gt ${thresh} ]; then
			exit_warning "bad average latency"
		fi
	fi
}

function get_ata_stats_val()
{
	local dev="$1"
	local page_type="$2" # T2A or T2B
	local dld="$3" # 1 to 7
	local sel="$4"	# A or B

	statdesc=$(cdladm stats-show --page "${page_type}" "${dev}" | \
		grep "Statistic ${sel}" | sed -n "${dld}p")
	if [ "${statdesc}" == "" ]; then
		exit_failed "Failed to get page ${page_type} desciptor ${dld} statistics ${sel}"
	fi

	val=$(echo "${statdesc}" | cut -f2 -d ':')
	if [ "${val}" == " Disabled" ]; then
		echo "0"
	else
		echo "${val}" | cut -f2 -d '=' | tr -d '[:blank:]'
	fi
}

function check_ata_non_zero_stats_val()
{
	local dev="$1"
	local p
	local d
	local s

	for p in T2A T2B; do
		for d in 1 2 3 4 5 6 7; do
			for s in A B; do
				val=$(get_ata_stats_val "${dev}" "${p}" "${d}" "${s}")
				if [ "${val}" != "0" ]; then
					return 0
				fi
			done
		done
	done

	exit_failed "All statistics are equal to 0, expected values != 0"
}

function check_ata_zero_stats_val()
{
	local dev="$1"
	local p
	local d
	local s

	for p in T2A T2B; do
		for d in 1 2 3 4 5 6 7; do
			for s in A B; do
				val=$(get_ata_stats_val "${dev}" "${p}" "${d}" "${s}")
				if [ "${val}" != "0" ]; then
					exit_failed "Page ${p}, descriptor ${d}, selector ${s} value is ${val} (expected 0)"
				fi
			done
		done
	done
}

function analyze_log_stats()
{
	local dev="$1"
	local page_type="$2"
	local dld="$3"
	local fiolog="$4"
	local stat_a_count="$5"
	local stat_b_count="$6"
	local expect_stat_a_count="$7"
	local expect_stat_b_count="$8"

	echo ""
	echo "Statistics:"

	# Note: stats test cases use only read
	nr_io_errors=$(fio_get_io_error_count "${fiolog}")
	echo "fio log shows ${nr_io_errors} I/O error"

	msga="Invalid statistics A counter for ${nr_io_errors} I/O errors"
	msgb="Invalid statistics B counter for ${nr_io_errors} I/O errors"
	statscount=0

	# Check statistics A
	statval=$(get_ata_stats_val "${dev}" "${page_type}" "${dld}" "A")
	echo "Statistic A: ${stat_a_count} -> ${statval}"
	stataval=$(( statval - stat_a_count ))
	statscount=$(( statscount + stataval ))

	if [ "${expect_stat_a_count}" == "0" ] && [ ${stataval} -ne 0 ]; then
		exit_failed "${msga}: did not expect statistics A count, got ${stataval}"
	elif [ "${expect_stat_a_count}" == "1" ] && [ ${stataval} -eq 0 ]; then
		# If we are using 2 different counters, we may not get errors for one type.
		# Only warn about it instead of reporting an error.
		if [ "${expect_stat_b_count}" == "1" ]; then
			exit_warning "${msga}: expected statistics A count, got ${stataval}"
		else
			exit_failed "${msga}: expected statistics A count, got ${stataval}"
		fi
	fi

	# Check statistics B
	statval=$(get_ata_stats_val "${dev}" "${page_type}" "${dld}" "B")
	echo "Statistic B: ${stat_b_count} -> ${statval}"
	statbval=$(( statval - stat_b_count ))
	statscount=$(( statscount + statbval ))

	if [ "${expect_stat_b_count}" == "0" ] && [ ${statbval} -ne 0 ]; then
		exit_failed "${msgb}: did not expect statistics B count, got ${statbval}"
	elif [ "${expect_stat_b_count}" == "1" ] && [ ${statbval} -eq 0 ]; then
		# If we are using 2 different counters, we may not get errors for one type.
		# Only warn about it instead of reporting an error.
		if [ "${expect_stat_a_count}" == "1" ]; then
			exit_warning "${msgb}: expected statistics B count, got ${statbval}"
		else
			exit_failed "${msgb}: expected statistics B count, got ${statbval}"
		fi
	fi

	# Check both
	if [ "${expect_stat_a_count}" == "1" ] && [ "${expect_stat_b_count}" == "1" ] && [ ${statscount} -eq 0 ]; then
		exit_failed "${msgb}: expected statistics A and B count, got ${stataval} and ${statbval}"
	fi

	# Check total count: it may happen that fio IOs are split, resulting in the statistic counter
	# being larger than the number of errors reported by fio. Only warn in such case.
	echo "Total statistics count for descriptor ${dld}: ${statscount}"
	if [ ${statscount} -lt ${nr_io_errors} ]; then
		exit_failed "Invalid statistics: expected total count of ${nr_io_errors}, got ${statscount}"
	elif [ ${statscount} -ne ${nr_io_errors} ]; then
		exit_warning "Statistics: expected total count of ${nr_io_errors}, got ${statscount}"
	fi
}

function execute_test()
{
	local testname="$1"
	local read_limits="$2"
	local write_limits="$3"
	local cdl_dld="$4"
	local expect_error="$5"
	local compare_latencies="$6"
	local filename="$7"
	local dev="$8"
	local ncq="$9"
	local rw="${10}"
	local stats="${11}"
	local expect_stat_a_count="${12}"
	local expect_stat_b_count="${13}"
	local page_type=""
	local stat_a_count=0
	local stat_b_count=0

	if [ $# -lt 10 ]; then
		exit_failed "incorrect number of arguments given"
	fi

	test_setup "${dev}" \
		"${read_limits}" "${write_limits}" \
		"${expect_error}" "${compare_latencies}" \
		"${ncq}" "${rw}" || \
		exit_failed "error during setup"

	# Statistics tests add 3 optional arguments
	if [ "${stats}" != "" ]; then
		test_setup_stats "${dev}" "${stats}" || \
			exit_failed "error during stats setup"

		page_type="$(get_limits_page_type ${dev} read)"

		stat_a_count=$(get_ata_stats_val "${dev}" "${page_type}" "${cdl_dld}" "A")
		echo "Statistic A start count: ${stat_a_count}"

		stat_b_count=$(get_ata_stats_val "${dev}" "${page_type}" "${cdl_dld}" "B")
		echo "Statistic B start count: ${stat_b_count}"

		disable_merges "${dev}"
	fi

	# fio command
	fiocmd=$(fio_common_cmdline "${dev}" "${filename}" \
		"${testname}" "${cdl_dld}" "${expect_error}" \
		"${compare_latencies}" "${rw}")

	echo "Running fio:"
	fiolog="${logdir}/$(test_num $filename)_fio.log"
	echo "${fiocmd}"
	eval ${fiocmd} | tee "${fiolog}" || \
		{ enable_merges "${dev}"; exit_failed "running fio failed"; }

	analyze_log "${fiolog}" "${expect_error}" \
		"${compare_latencies}" "${cdl_dld}" "${rw}" "${dev}" || \
		exit_failed "error while analyzing fio log"

	if [ "${stats}" != "" ]; then
		analyze_log_stats "${dev}" "${page_type}" "${cdl_dld}" \
			"${fiolog}" "${stat_a_count}" "${stat_b_count}" \
			"${expect_stat_a_count}" "${expect_stat_b_count}" || \
			exit_failed "error while analyzing fio log for stats"
	fi
}

